{"version":3,"sources":["../src/textlint-rule-warning-word.js"],"names":["yaml","require","fs","Object","defineProperty","exports","value","_defineProperty","obj","key","enumerable","configurable","writable","getWordsArray","options","wordsArray","rulePaths","i","length","rulePath","__dirname","access","err","console","error","process","exit","wordsArray_work","safeLoad","readFileSync","rules","concat","delPerfixAndSafix","word","delWord","slice","context","arguments","undefined","Syntax","getSource","report","RuleError","Document","node","Promise","resolve","reject","text","words","forEach","pattern","RegExp","result","exec","index","matchWord","ruleError","module"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst yaml = require('js-yaml')\r\nconst fs = require('fs')\r\n\r\nObject.defineProperty(exports, '__esModule', {\r\n  value: true\r\n});\r\n\r\nfunction _defineProperty(obj, key, value) {\r\n  if (key in obj) {\r\n      Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\r\n  } else {\r\n      obj[key] = value;\r\n  } return obj;\r\n}\r\n\r\n// Make an array of characters to check.\r\nfunction getWordsArray(options) {\r\n  let wordsArray = [];\r\n  const rulePaths = options.rulePaths || [];\r\n  for ( let i = 0; i < rulePaths.length; i++ ) {\r\n      let rulePath = (__dirname + '/../dict/' + rulePaths[i]);\r\n      fs.access(rulePath, function (err) {\r\n          if (err) {\r\n              console.error(err);\r\n              process.exit(1);\r\n          }\r\n      });\r\n  let wordsArray_work = yaml.safeLoad(fs.readFileSync(rulePath));\r\n  wordsArray_work = wordsArray_work.rules || [];\r\n  wordsArray = wordsArray.concat(wordsArray_work);\r\n  }\r\n  return wordsArray;\r\n}\r\n\r\n// An error occurs in RegEx if you do not enclose the character with a slash.\r\n// In this function, delete the slash.\r\nfunction delPerfixAndSafix(word) {\r\n  let delWord = word.slice( 1 );\r\n  delWord = delWord.slice( 0, -1 );\r\n  return delWord;\r\n}\r\n\r\n\r\nexports['default'] = function (context) {\r\n  const options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\r\n  const Syntax = context.Syntax;\r\n  const getSource = context.getSource;\r\n  const report = context.report;\r\n  const RuleError = context.RuleError;\r\n\r\n  return _defineProperty({}, Syntax.Document, function (node) {\r\n      return new Promise(function (resolve, reject) {\r\n          const text = getSource(node);\r\n          let words = getWordsArray(options);\r\n          words.forEach(function (word) {\r\n              word = delPerfixAndSafix(word);\r\n              const pattern = new RegExp(word,\"g\");\r\n              let result = [];\r\n              while ( result = pattern.exec(text)) {\r\n                  let index = result.index;\r\n                  let matchWord = result[0];\r\n                  const ruleError = new RuleError('正しい使い方ですか: ' + matchWord, {index: index});\r\n                  report(node, ruleError);\r\n              }\r\n          });\r\n          resolve();\r\n      });\r\n  });\r\n};\r\n\r\nmodule.exports = exports['default'];\r\n"],"file":"textlint-rule-warning-word.js"}